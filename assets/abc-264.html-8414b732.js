const n=JSON.parse('{"key":"v-e311b274","path":"/posts/Algorithm/AtCoder/abc-264.html","title":"ABC-264","lang":"en-US","frontmatter":{"title":"ABC-264","icon":"pen-to-square","date":"2022-08-13T00:00:00.000Z","category":["AtCoder"],"tag":["dsu"],"description":"E. Blackout 2 (DSU) #include &lt;bits/stdc++.h&gt; using namespace std; struct DSU { vector&lt;int&gt; a, b; vector&lt;int&gt; p; DSU(int n, int m) { a.resize(n + m, 0); b.resize(n + m, 0); p.resize(n + m, -1); for (int i = 0; i &lt; n; i++) { a[i] = 1; } for (int i = n; i &lt; n + m; i++) { b[i] = 1; } } int root(int x) { if (p[x] == -1) { return x; } else { p[x] = root(p[x]); return p[x]; } } bool connect(int x, int y) { return root(x) == root(y); } int get_a(int x) { return a[root(x)]; } int get_b(int x) { return b[root(x)]; } void to_union(int x, int y) { int px = root(x); int py = root(y); p[px] = py; a[py] += a[px]; b[py] += b[px]; } }; int main() { ios::sync_with_stdio(false); cin.tie(0); int n, m, e; cin &gt;&gt; n &gt;&gt; m &gt;&gt; e; vector&lt;int&gt; u(e), v(e); for (int i = 0; i &lt; e; i++) { cin &gt;&gt; u[i] &gt;&gt; v[i]; u[i]--; v[i]--; } int q; cin &gt;&gt; q; vector&lt;int&gt; x(q); vector&lt;bool&gt; ok(e, true); for (int i = 0; i &lt; q; i++) { cin &gt;&gt; x[i]; x[i]--; ok[x[i]] = false; } DSU dsu(n, m); int cnt = 0; for (int i = 0; i &lt; e; i++) { if (ok[i]) { if (!dsu.connect(u[i], v[i])) { int ua = dsu.get_a(u[i]); int va = dsu.get_a(v[i]); int ub = dsu.get_b(u[i]); int vb = dsu.get_b(v[i]); if (ub &gt; 0 &amp;&amp; vb == 0) { cnt += va; } if (ub == 0 &amp;&amp; vb &gt; 0) { cnt += ua; } dsu.to_union(u[i], v[i]); } } } vector&lt;int&gt; ans(q); for (int i = q - 1; i &gt;= 0; i--) { ans[i] = cnt; if (!dsu.connect(u[x[i]], v[x[i]])) { int ua = dsu.get_a(u[x[i]]); int va = dsu.get_a(v[x[i]]); int ub = dsu.get_b(u[x[i]]); int vb = dsu.get_b(v[x[i]]); if (ub &gt; 0 &amp;&amp; vb == 0){ cnt += va; } if (vb &gt; 0 &amp;&amp; ub == 0){ cnt += ua; } dsu.to_union(u[x[i]], v[x[i]]); } } for (auto &amp; num : ans) { cout &lt;&lt; num &lt;&lt; endl; } return 0; }","head":[["meta",{"property":"og:url","content":"https://iwantdaydayup.github.io/Vuepress-theme-hope/Vuepress-theme-hope/posts/Algorithm/AtCoder/abc-264.html"}],["meta",{"property":"og:site_name","content":"TayLock"}],["meta",{"property":"og:title","content":"ABC-264"}],["meta",{"property":"og:description","content":"E. Blackout 2 (DSU) #include &lt;bits/stdc++.h&gt; using namespace std; struct DSU { vector&lt;int&gt; a, b; vector&lt;int&gt; p; DSU(int n, int m) { a.resize(n + m, 0); b.resize(n + m, 0); p.resize(n + m, -1); for (int i = 0; i &lt; n; i++) { a[i] = 1; } for (int i = n; i &lt; n + m; i++) { b[i] = 1; } } int root(int x) { if (p[x] == -1) { return x; } else { p[x] = root(p[x]); return p[x]; } } bool connect(int x, int y) { return root(x) == root(y); } int get_a(int x) { return a[root(x)]; } int get_b(int x) { return b[root(x)]; } void to_union(int x, int y) { int px = root(x); int py = root(y); p[px] = py; a[py] += a[px]; b[py] += b[px]; } }; int main() { ios::sync_with_stdio(false); cin.tie(0); int n, m, e; cin &gt;&gt; n &gt;&gt; m &gt;&gt; e; vector&lt;int&gt; u(e), v(e); for (int i = 0; i &lt; e; i++) { cin &gt;&gt; u[i] &gt;&gt; v[i]; u[i]--; v[i]--; } int q; cin &gt;&gt; q; vector&lt;int&gt; x(q); vector&lt;bool&gt; ok(e, true); for (int i = 0; i &lt; q; i++) { cin &gt;&gt; x[i]; x[i]--; ok[x[i]] = false; } DSU dsu(n, m); int cnt = 0; for (int i = 0; i &lt; e; i++) { if (ok[i]) { if (!dsu.connect(u[i], v[i])) { int ua = dsu.get_a(u[i]); int va = dsu.get_a(v[i]); int ub = dsu.get_b(u[i]); int vb = dsu.get_b(v[i]); if (ub &gt; 0 &amp;&amp; vb == 0) { cnt += va; } if (ub == 0 &amp;&amp; vb &gt; 0) { cnt += ua; } dsu.to_union(u[i], v[i]); } } } vector&lt;int&gt; ans(q); for (int i = q - 1; i &gt;= 0; i--) { ans[i] = cnt; if (!dsu.connect(u[x[i]], v[x[i]])) { int ua = dsu.get_a(u[x[i]]); int va = dsu.get_a(v[x[i]]); int ub = dsu.get_b(u[x[i]]); int vb = dsu.get_b(v[x[i]]); if (ub &gt; 0 &amp;&amp; vb == 0){ cnt += va; } if (vb &gt; 0 &amp;&amp; ub == 0){ cnt += ua; } dsu.to_union(u[x[i]], v[x[i]]); } } for (auto &amp; num : ans) { cout &lt;&lt; num &lt;&lt; endl; } return 0; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-10-25T07:41:14.000Z"}],["meta",{"property":"article:author","content":"TayLock"}],["meta",{"property":"article:tag","content":"dsu"}],["meta",{"property":"article:published_time","content":"2022-08-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-10-25T07:41:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ABC-264\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-08-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-10-25T07:41:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"TayLock\\",\\"url\\":\\"https://github.com/IWantDayDayUp\\"}]}"]]},"headers":[{"level":2,"title":"E. Blackout 2 (DSU)","slug":"e-blackout-2-dsu","link":"#e-blackout-2-dsu","children":[]}],"git":{"createdTime":1698219674000,"updatedTime":1698219674000,"contributors":[{"name":"再也不敢","email":"1462959616@qq.com","commits":1}]},"readingTime":{"minutes":1.17,"words":351},"filePathRelative":"posts/Algorithm/AtCoder/abc-264.md","localizedDate":"August 13, 2022","excerpt":"<h2> E. Blackout 2 (DSU)</h2>\\n<div class=\\"language-cpp line-numbers-mode\\" data-ext=\\"cpp\\"><pre class=\\"language-cpp\\"><code><span class=\\"token macro property\\"><span class=\\"token directive-hash\\">#</span><span class=\\"token directive keyword\\">include</span> <span class=\\"token string\\">&lt;bits/stdc++.h&gt;</span></span>\\n\\n<span class=\\"token keyword\\">using</span> <span class=\\"token keyword\\">namespace</span> std<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">DSU</span> <span class=\\"token punctuation\\">{</span>\\n    vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> a<span class=\\"token punctuation\\">,</span> b<span class=\\"token punctuation\\">;</span>\\n    vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> p<span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token function\\">DSU</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> m<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        a<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resize</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">+</span> m<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        b<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resize</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">+</span> m<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        p<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">resize</span><span class=\\"token punctuation\\">(</span>n <span class=\\"token operator\\">+</span> m<span class=\\"token punctuation\\">,</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            a<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> n<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> n <span class=\\"token operator\\">+</span> m<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            b<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">==</span> <span class=\\"token operator\\">-</span><span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> x<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">else</span> <span class=\\"token punctuation\\">{</span>\\n            p<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span>p<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">return</span> p<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">bool</span> <span class=\\"token function\\">connect</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> <span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">==</span> <span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">get_a</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> a<span class=\\"token punctuation\\">[</span><span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">get_b</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">return</span> b<span class=\\"token punctuation\\">[</span><span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">to_union</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">int</span> px <span class=\\"token operator\\">=</span> <span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span>x<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">int</span> py <span class=\\"token operator\\">=</span> <span class=\\"token function\\">root</span><span class=\\"token punctuation\\">(</span>y<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        p<span class=\\"token punctuation\\">[</span>px<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> py<span class=\\"token punctuation\\">;</span>\\n        a<span class=\\"token punctuation\\">[</span>py<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> a<span class=\\"token punctuation\\">[</span>px<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        b<span class=\\"token punctuation\\">[</span>py<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">+=</span> b<span class=\\"token punctuation\\">[</span>px<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">int</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    ios<span class=\\"token double-colon punctuation\\">::</span><span class=\\"token function\\">sync_with_stdio</span><span class=\\"token punctuation\\">(</span><span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    cin<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">tie</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">int</span> n<span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">,</span> e<span class=\\"token punctuation\\">;</span>\\n    cin <span class=\\"token operator\\">&gt;&gt;</span> n <span class=\\"token operator\\">&gt;&gt;</span> m <span class=\\"token operator\\">&gt;&gt;</span> e<span class=\\"token punctuation\\">;</span>\\n\\n    vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">u</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">,</span> <span class=\\"token function\\">v</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> e<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cin <span class=\\"token operator\\">&gt;&gt;</span> u<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">&gt;&gt;</span> v<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        u<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n        v<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">int</span> q<span class=\\"token punctuation\\">;</span>\\n    cin <span class=\\"token operator\\">&gt;&gt;</span> q<span class=\\"token punctuation\\">;</span>\\n    vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">x</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">bool</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">ok</span><span class=\\"token punctuation\\">(</span>e<span class=\\"token punctuation\\">,</span> <span class=\\"token boolean\\">true</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> q<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cin <span class=\\"token operator\\">&gt;&gt;</span> x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n        x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">;</span>\\n\\n        ok<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    DSU <span class=\\"token function\\">dsu</span><span class=\\"token punctuation\\">(</span>n<span class=\\"token punctuation\\">,</span> m<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">int</span> cnt <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> e<span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ok<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">connect</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> v<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n            <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">int</span> ua <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_a</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">int</span> va <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_a</span><span class=\\"token punctuation\\">(</span>v<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token keyword\\">int</span> ub <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_b</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token keyword\\">int</span> vb <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_b</span><span class=\\"token punctuation\\">(</span>v<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ub <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> vb <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    cnt <span class=\\"token operator\\">+=</span> va<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ub <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> vb <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n                <span class=\\"token punctuation\\">{</span>\\n                    cnt <span class=\\"token operator\\">+=</span> ua<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span>\\n\\n                dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">to_union</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> v<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    vector<span class=\\"token operator\\">&lt;</span><span class=\\"token keyword\\">int</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token function\\">ans</span><span class=\\"token punctuation\\">(</span>q<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> q <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&gt;=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">--</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        ans<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> cnt<span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">connect</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> v<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">int</span> ua <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_a</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> va <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_a</span><span class=\\"token punctuation\\">(</span>v<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token keyword\\">int</span> ub <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_b</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token keyword\\">int</span> vb <span class=\\"token operator\\">=</span> dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get_b</span><span class=\\"token punctuation\\">(</span>v<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>ub <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> vb <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                cnt <span class=\\"token operator\\">+=</span> va<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>vb <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">0</span> <span class=\\"token operator\\">&amp;&amp;</span> ub <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n                cnt <span class=\\"token operator\\">+=</span> ua<span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n\\n            dsu<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">to_union</span><span class=\\"token punctuation\\">(</span>u<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span> v<span class=\\"token punctuation\\">[</span>x<span class=\\"token punctuation\\">[</span>i<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">auto</span> <span class=\\"token operator\\">&amp;</span> num <span class=\\"token operator\\">:</span> ans<span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">{</span>\\n        cout <span class=\\"token operator\\">&lt;&lt;</span> num <span class=\\"token operator\\">&lt;&lt;</span> endl<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
